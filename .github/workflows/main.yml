name: Laravel Tests

on:
  push:
    branches: [ "main" ]

jobs:
  tests:

    runs-on: ubuntu-latest

    steps:
    - uses: shivammathur/setup-php@v2
      with:
        php-version: '8.1'
        extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, sqlite, pdo_sqlite, bcmath, soap, intl, gd, exif, iconv, rdkafka
        coverage: none
    - uses: actions/checkout@v3
    - name: Copy .env
      run: php -r "file_exists('.env') || copy('.env.example', '.env');"
    - name: Install Dependencies
      run: composer install
    - name: Generate key
      run: php artisan key:generate
    - name: Directory Permissions
      run: chmod -R 777 storage bootstrap/cache
    - name: Create Database
      run: |
        mkdir -p database
        touch database/database.sqlite
    - name: Execute tests (Unit and Feature tests) via PHPUnit
      env:
        APP_ENV: testing
        DB_CONNECTION: sqlite
        DB_DATABASE: database/database.sqlite
      run: php artisan test
    - name: Run Code Analysis
      run: ./vendor/bin/phpstan analyse app --error-format=github

  build-and-upload-docker-image:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: docker build
        run: docker build -t ${{ secrets.DOCKER_USERNAME }}/micro-service-stock-php:latest .

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}
      - name: Docker Push
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/micro-service-stock-php:latest
  deploy:
    needs: tests
    runs-on: ubuntu-latest
    steps:
      - name: deploy
        uses: appleboy/ssh-action@master
        env:
          PROJECT_PATH: ${{ vars.PROJECT_PATH }}
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          password: ${{ secrets.PASSWORD }}
          envs: PROJECT_PATH
          script: |
            echo "Moving to project path"
            cd ${PROJECT_PATH}
            git pull --progress -v --no-rebase "origin"
            echo "Starting deployement"
            docker-compose up -d
            echo "Starting configuration"
            docker exec ${{ vars.CONTAINER_NAME }} ./configuration.sh
      - name: Checking Service
        env:
          ENDPOINT: ${{ vars.API_HEALTCHECK_ENDPOINT }}
        run: |
          echo "Testing endpoint healtcheck"
          RESPONSE=$(curl -o /dev/null -s -w "%{http_code}\n" ${ENDPOINT})
          echo ${RESPONSE}
          if [ ${RESPONSE} -ne "200" ]
            then
              echo "Service unresponsive"
            exit 1
          fi
            echo "Deployement success!"
